// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ao7777/redirectService/interface/service (interfaces: IRedirect)

// Package mock_service is a generated GoMock package.
package mock_service

import (
        dao "github.com/ao7777/redirectService/interface/dao"
        gomock "github.com/golang/mock/gomock"
        reflect "reflect"
)

// MockIRedirect is a mock of IRedirect interface
type MockIRedirect struct {
        ctrl     *gomock.Controller
        recorder *MockIRedirectMockRecorder
}

// MockIRedirectMockRecorder is the mock recorder for MockIRedirect
type MockIRedirectMockRecorder struct {
        mock *MockIRedirect
}

// NewMockIRedirect creates a new mock instance
func NewMockIRedirect(ctrl *gomock.Controller) *MockIRedirect {
        mock := &MockIRedirect{ctrl: ctrl}
        mock.recorder = &MockIRedirectMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRedirect) EXPECT() *MockIRedirectMockRecorder {
        return m.recorder
}

// Destr mocks base method
func (m *MockIRedirect) Destr() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Destr")
}

// Destr indicates an expected call of Destr
func (mr *MockIRedirectMockRecorder) Destr() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destr", reflect.TypeOf((*MockIRedirect)(nil).Destr))
}

// Init mocks base method
func (m *MockIRedirect) Init(arg0 ...dao.IShortUrl) {
        m.ctrl.T.Helper()
        varargs := []interface{}{}
        for _, a := range arg0 {
                varargs = append(varargs, a)
        }
        m.ctrl.Call(m, "Init", varargs...)
}

// Init indicates an expected call of Init
func (mr *MockIRedirectMockRecorder) Init(arg0 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIRedirect)(nil).Init), arg0...)
}

// ShortToLong mocks base method
func (m *MockIRedirect) ShortToLong(arg0 string) string {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ShortToLong", arg0)
        ret0, _ := ret[0].(string)
        return ret0
}

// ShortToLong indicates an expected call of ShortToLong
func (mr *MockIRedirectMockRecorder) ShortToLong(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortToLong", reflect.TypeOf((*MockIRedirect)(nil).ShortToLong), arg0)
}