// Code generated by MockGen. DO NOT EDIT.
// Source: visit.go

package dao

import (
	gomock "github.com/golang/mock/gomock"
	dao "github.com/violedo/logService/interface/dao"
	reflect "reflect"
)

// MockILogService is a mock of ILogService interface
type MockILogService struct {
	ctrl     *gomock.Controller
	recorder *MockILogServiceMockRecorder
}

// MockILogServiceMockRecorder is the mock recorder for MockILogService
type MockILogServiceMockRecorder struct {
	mock *MockILogService
}

// NewMockILogService creates a new mock instance
func NewMockILogService(ctrl *gomock.Controller) *MockILogService {
	mock := &MockILogService{ctrl: ctrl}
	mock.recorder = &MockILogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockILogService) EXPECT() *MockILogServiceMockRecorder {
	return _m.recorder
}

// InitService mocks base method
func (_m *MockILogService) InitService(logDAO ...dao.DAO) {
	_s := []interface{}{}
	for _, _x := range logDAO {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "InitService", _s...)
}

// InitService indicates an expected call of InitService
func (_mr *MockILogServiceMockRecorder) InitService(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InitService", reflect.TypeOf((*MockILogService)(nil).InitService), arg0...)
}

// Destr mocks base method
func (_m *MockILogService) Destr() {
	_m.ctrl.Call(_m, "Destr")
}

// Destr indicates an expected call of Destr
func (_mr *MockILogServiceMockRecorder) Destr() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Destr", reflect.TypeOf((*MockILogService)(nil).Destr))
}

// Log mocks base method
func (_m *MockILogService) Log(shortenID int64, longID string, IP string, Device bool) {
	_m.ctrl.Call(_m, "Log", shortenID, longID, IP, Device)
}

// Log indicates an expected call of Log
func (_mr *MockILogServiceMockRecorder) Log(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Log", reflect.TypeOf((*MockILogService)(nil).Log), arg0, arg1, arg2, arg3)
}
